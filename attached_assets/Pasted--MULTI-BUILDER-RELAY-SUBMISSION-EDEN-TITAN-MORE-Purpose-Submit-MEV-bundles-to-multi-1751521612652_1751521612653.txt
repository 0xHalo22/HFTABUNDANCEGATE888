# 🔁 MULTI-BUILDER RELAY SUBMISSION (EDEN + TITAN + MORE)

## 📦 Purpose
Submit MEV bundles to multiple builders to maximize inclusion chances without authentication overhead. Supports Titan, Eden, and any open relay with no Flashbots key required.

---

## ✅ RELAYS (No Auth Required)

```python
RELAYS = [
    "https://rpc.titanbuilder.xyz",        # Titan Builder ✅ No Auth
    "https://builder0x69.io",              # Eden Builder ✅ No Auth
    "https://rpc.payload.de",              # Payload Builder ✅ No Auth
    "https://rpc.nfactorial.xyz",          # Nfactorial Builder ✅ No Auth
    "https://rpc.0x69.me",                 # Builder0x69 mirror ✅ No Auth
    # Add more as discovered
]
```

---

## 🧩 Submission Function

```python
import requests

def send_bundle_to_relays(bundle_payload):
    headers = {"Content-Type": "application/json"}
    results = {}

    for relay_url in RELAYS:
        try:
            response = requests.post(relay_url, headers=headers, json=bundle_payload)
            results[relay_url] = response.status_code
            print(f"✅ Sent bundle to {relay_url} | Status: {response.status_code}")
        except Exception as e:
            results[relay_url] = str(e)
            print(f"❌ Error sending bundle to {relay_url}: {e}")
    
    return results
```

---

## 🚀 Usage Example

Call this after building your 3-part sandwich bundle:

```python
bundle = build_bundle(front_tx, victim_tx, back_tx)
send_bundle_to_relays(bundle)
```

---

## 🔍 Output Example

```text
✅ Sent bundle to https://rpc.titanbuilder.xyz | Status: 200
✅ Sent bundle to https://builder0x69.io | Status: 200
✅ Sent bundle to https://rpc.payload.de | Status: 200
```

---

## 🧠 Optional Improvements

- Log which relay includes your bundle (via inclusion monitoring)
- Add exponential backoff/retry if you see rate limits (e.g., 429/503)
- Dynamically skip dead relays based on health checks

---

## 🎯 GOAL

> **Double or triple your odds of validator inclusion** without needing Flashbots auth or modifying bundle structure.

This patch is production-safe and can be dropped into `flashbots.py`, `executor.py`, or its own module.

